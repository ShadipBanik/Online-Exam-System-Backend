#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../src/app');
var debug = require('debug')('online-exam-system:server');
var http = require('http');
var models=require('../src/models')

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '4200');
 app.set('port', port);
 
 var server = http.createServer(app);
 
 server.timeout = 240000;
 
//  models.sequelize.sync({force:true}).then(function() {
   server.listen(port, function() {
     console.log('Express server listening on port ' + server.address().port);
     });
   server.on('error', onError);
   server.on('listening', onListening);
//  });
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 
 function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }